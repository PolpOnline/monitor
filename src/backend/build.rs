use std::{
    ffi::OsStr,
    fs::{self, File},
    io::Write,
    path::Path,
};

const TS_RS_EXPORT_DIR: &str = "../frontend/src/lib/bindings";

// generated by `sqlx migrate build-script`
fn main() {
    // trigger recompilation when a new migration is added
    println!("cargo:rerun-if-changed=migrations");
    println!("cargo::rerun-if-changed={}", TS_RS_EXPORT_DIR);

    gen_binding_index();
}

// From https://github.com/Aleph-Alpha/ts-rs/issues/133#issuecomment-1399589933
fn gen_binding_index() {
    println!("Generating bindings/index.ts");

    let path = Path::new(TS_RS_EXPORT_DIR);

    if let Ok(exports) = fs::read_dir(path) {
        let mut exports: Vec<String> = exports
            .filter_map(Result::ok)
            .filter_map(|p| {
                p.path()
                    .file_stem()
                    .and_then(OsStr::to_str)
                    .map(str::to_owned)
            })
            .filter(|f| f != "index")
            .collect();

        exports.sort();

        let exports = exports
            .iter()
            .map(|f| format!("export * from \"./{}\"", f))
            .collect::<Vec<_>>();

        let mut file = File::create(path.join("index.ts")).unwrap();
        file.write_all(exports.join("\n").as_bytes()).unwrap();

        println!("Generated bindings/index.ts");
    } else {
        eprintln!("Cannot generate bindings/index.ts, bindings directory not found");
    }
}
