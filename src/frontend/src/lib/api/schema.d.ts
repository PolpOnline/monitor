/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/add_system': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations['add_system'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/change_visibility': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['change_visibility'];
		trace?: never;
	};
	'/delete_system': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations['delete_system'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/edit_system_name': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['edit_system_name'];
		trace?: never;
	};
	'/get_public/:id': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['get_public'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthcheck': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['healthcheck'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/list_systems': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['list_systems'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations['login'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/logout': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['logout'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/ping_status/:id': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations['ping_status'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/sys_info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['sys_info'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/change_language': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['change_language'];
		trace?: never;
	};
	'/user/change_password': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['change_password'];
		trace?: never;
	};
	'/user/change_timezone': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['change_timezone'];
		trace?: never;
	};
	'/user/get_current_settings': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['get_current_settings'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AddSystemRequest: {
			/**
			 * Format: int64
			 * @description Time in minutes after which the user will get emailed
			 */
			down_after: number;
			/**
			 * Format: int64
			 * @description Frequency in minutes
			 */
			frequency: number;
			name: string;
			/** Format: date-time */
			starts_at: string;
			visibility: components['schemas']['Visibility'];
		};
		AddSystemResponse: {
			/** Format: uuid */
			id: string;
		};
		BasicSystemInfo: {
			system_host_name: string;
			system_kernel_version: string;
			system_name: string;
			system_os_version: string;
		};
		ChangeLanguageRequest: {
			language: string;
		};
		ChangePasswordRequest: {
			new_password: string;
			old_password: string;
		};
		ChangeTimezoneRequest: {
			timezone: string;
		};
		ChangeVisibilityRequest: {
			/** Format: uuid */
			id: string;
			visibility: components['schemas']['Visibility'];
		};
		CpuInfo: {
			brand: string;
			frequency: string;
			name: string;
			/** Format: float */
			usage: number;
			vendor_id: string;
		};
		Credentials: {
			email: string;
			password: string;
		};
		DeleteSystemRequest: {
			/** Format: uuid */
			id: string;
		};
		EditSystemNameRequest: {
			/** Format: uuid */
			id: string;
			name: string;
		};
		GetCurrentSettingsResponse: {
			language: string;
			timezone: string;
		};
		GetPublicResponse: {
			system: components['schemas']['SystemData'];
		};
		Instant: {
			/** Format: date-time */
			expected_timestamp: string;
			status: components['schemas']['Status'];
			/** Format: date-time */
			timestamp?: string | null;
		};
		ListSystemsResponse: {
			systems: components['schemas']['SystemData'][];
		};
		MemInfo: {
			free: string;
			total: string;
			used: string;
		};
		/** @enum {string} */
		Status: 'up' | 'down' | 'untracked';
		SwapInfo: {
			free: string;
			total: string;
			used: string;
		};
		SystemData: {
			/**
			 * Format: int32
			 * @description Frequency in minutes
			 */
			frequency: number;
			/** Format: uuid */
			id: string;
			instants: components['schemas']['Instant'][];
			name: string;
			/** Format: date-time */
			starts_at: string;
			visibility: components['schemas']['Visibility'];
		};
		SystemInfoResponse: {
			basic: components['schemas']['BasicSystemInfo'];
			cpu_info: components['schemas']['CpuInfo'];
			memory: components['schemas']['MemInfo'];
			swap: components['schemas']['SwapInfo'];
		};
		/** @enum {string} */
		Visibility: 'public' | 'private';
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	add_system: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AddSystemRequest'];
			};
		};
		responses: {
			/** @description System was created successfully */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AddSystemResponse'];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	change_visibility: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ChangeVisibilityRequest'];
			};
		};
		responses: {
			/** @description Visibility was changed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	delete_system: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['DeleteSystemRequest'];
			};
		};
		responses: {
			/** @description System was deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	edit_system_name: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['EditSystemNameRequest'];
			};
		};
		responses: {
			/** @description System name was edited successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_public: {
		parameters: {
			query: {
				list_size: number;
				page: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Public system was retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetPublicResponse'];
				};
			};
			/** @description List size is too large */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description System not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	healthcheck: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Healthcheck was successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_systems: {
		parameters: {
			query: {
				page: number;
				list_size: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of systems */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ListSystemsResponse'];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	login: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Credentials'];
			};
		};
		responses: {
			/** @description User was logged in */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User was created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Wrong password */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': string;
				};
			};
		};
	};
	logout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User was logged out */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	ping_status: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Ping was successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description System not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	sys_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description System information was retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SystemInfoResponse'];
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	change_language: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ChangeLanguageRequest'];
			};
		};
		responses: {
			/** @description Language was changed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Language is not valid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	change_password: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ChangePasswordRequest'];
			};
		};
		responses: {
			/** @description Password was changed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Old password is wrong */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	change_timezone: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ChangeTimezoneRequest'];
			};
		};
		responses: {
			/** @description Timezone was changed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Timezone is not valid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User is not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_current_settings: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Current settings were retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetCurrentSettingsResponse'];
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
